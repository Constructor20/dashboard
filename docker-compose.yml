version: "3.8"

services:
  # Backend PHP (interne, pas exposé publiquement)
  web:
    build: .
    container_name: php-web
    environment:
      VIRTUAL_HOST: php.chrisdashboard.ddnsfree.com
      LETSENCRYPT_HOST: php.chrisdashboard.ddnsfree.com
      LETSENCRYPT_EMAIL: aleixochristophe@gmail.com
    volumes:
      - ./web/site:/var/www/html
    restart: unless-stopped
    platform: linux/arm64
    networks:
      - webnet

  # Front-end React (site public sous SSL)
  frontend:
    image: node:20-alpine
    container_name: react-frontend
    working_dir: /app
    environment:
      VIRTUAL_HOST: chrisdashboard.ddnsfree.com
      LETSENCRYPT_HOST: chrisdashboard.ddnsfree.com
      LETSENCRYPT_EMAIL: aleixochristophe@gmail.com
    volumes:
      - ./web/frontend:/app
    command: sh -c "npm install && npm run build && npm install -g serve && serve -s dist -l tcp://0.0.0.0:80"
    restart: unless-stopped
    platform: linux/arm64
    networks:
      - webnet

  frontend-dev:
    image: node:20-alpine
    container_name: react-frontend-dev
    working_dir: /app

    volumes:
      - ./web/frontend:/app
    ports:
      - "5173:5173"  # expose le port pour tests via Tailscale
    command: sh -c "npm install && npm run dev -- --host 0.0.0.0 --port 5173"
    restart: unless-stopped
    platform: linux/arm64


  # Base de données (interne)
  db:
    image: mariadb:10.6
    container_name: mysql-db
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: dashboard_db
      MYSQL_USER: user
      MYSQL_PASSWORD: pass
    volumes:
      - db_data:/var/lib/mysql
    restart: unless-stopped
    platform: linux/arm64
    networks:
      - webnet

  # Adminer (optionnel) -> soit tu laisses le port 8080 pour le LAN, soit tu mets un sous-domaine dédié
  adminer:
    image: adminer
    container_name: adminer
    ports:
      - "8080:8080"
    restart: unless-stopped
    platform: linux/arm64
    networks:
      - webnet

  # Proxy SSL (doit voir le socket Docker en /tmp/docker.sock)
  ssl-proxy:
    image: nginxproxy/nginx-proxy:alpine
    container_name: ssl-proxy
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/tmp/docker.sock:ro
      - ./certificatssl/certs:/etc/nginx/certs:rw
      - ./certificatssl/vhost.d:/etc/nginx/vhost.d
      - ./certificatssl/html:/usr/share/nginx/html
    restart: unless-stopped
    networks:
      - webnet

  # Companion Let's Encrypt
  ssl-companion:
    image: nginxproxy/acme-companion
    container_name: ssl-companion
    environment:
      NGINX_PROXY_CONTAINER: ssl-proxy
      ACME_CA_URI: https://acme-v02.api.letsencrypt.org/directory
    depends_on:
      - ssl-proxy
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./certificatssl/certs:/etc/nginx/certs:rw
      - ./certificatssl/vhost.d:/etc/nginx/vhost.d
      - ./certificatssl/html:/usr/share/nginx/html
      - ./certificatssl/acme:/etc/acme.sh
    restart: unless-stopped
    networks:
      - webnet

volumes:
  db_data:

networks:
  webnet:
